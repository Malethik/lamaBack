// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  userName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Costumers {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String   @unique
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order[]
}

model Order {
  id          Int         @id @default(autoincrement())
  total       Float
  sended      Boolean
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  costumers   Costumers   @relation(fields: [costumersId], references: [id])
  costumersId Int
  items       OrderItem[]
}

model Item {
  id          Int         @id @default(autoincrement()) // Identificativo univoco dell'articolo
  name        String // Nome dell'articolo
  price       Float       @default(0.0) // Prezzo dell'articolo
  cost        Float       @default(0.0) // Costo dell'articolo
  currency    String      @default("€") // Valuta (e.g., "€")
  category    String?     @default("Uncategorized") // Categoria dell'articolo (opzionale)
  tags        String?     @default("Uncategorized") // Tag associati all'articolo (opzionale)
  description String // Descrizione dell'articolo
  quantity    Int // Quantità disponibile dell'articolo
  lot         String      @default("0") // Lotto di produzione, se necessario
  createdAt   DateTime    @default(now()) // Data di creazione
  updatedAt   DateTime    @updatedAt // Data dell'ultimo aggiornamento
  supplier    Supplier    @relation(fields: [supplierId], references: [id]) // Relazione con il fornitore
  supplierId  Int // ID del fornitore
  orderItems  OrderItem[] // Relazione con gli articoli negli ordini (molti-a-molti)
  orderId     Int? // ID dell'ordine (opzionale)
}

model Supplier {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String   @unique
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  item      Item[]
}

model OrderItem {
  id       Int   @id @default(autoincrement())
  quantity Int
  itemId   Int
  item     Item  @relation(fields: [itemId], references: [id])
  orderId  Int
  order    Order @relation(fields: [orderId], references: [id])
}
